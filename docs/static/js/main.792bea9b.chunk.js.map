{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","className","onClick","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4LAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KA4BhD,OAEI,uBAAMC,SAdW,SAAEC,GAEnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAe,SAAAS,GACX,MAAO,CAACP,OAQhB,UAEA,uBACIQ,KAAK,OACLC,MAAST,EACTU,SA9BkB,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,QA6BpBG,YAAY,2BAGhB,wBACIJ,KAAK,QACLK,UAAU,WACVC,QAhCY,SAAEX,GAElBF,EAAe,KA2Bf,uB,8BC1CKc,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCIPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEtC,OAEI,sBAAKL,UAAU,yCAAf,UAEI,qBAAKmB,IAAMd,EAAMe,IAAML,IACvB,kCAAMA,EAAN,WCPCM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdjB,mBAAS,CAC/BwB,KAAM,GACNY,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAU,WACNvB,EAASC,GACJuB,MAAM,SAAAC,GACHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGtB,CAACnB,IAEGoB,EDf2BK,CAAazB,GAAjCa,EAFuB,EAE7BN,KAAcY,EAFe,EAEfA,QAEtB,OAEI,qCACI,qBAAItB,UAAU,oCAAd,cAAoDG,EAApD,OAEEmB,GAAW,wCAEO,IAAlBN,EAAOvB,QAAgB,8DAEvB,qBAAKO,UAAU,YAAf,SAEMgB,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEfxBe,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,SAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAI9B,OAEI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,6BAEQ6C,EAAWlB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAaA,GADLA,YCTjB4B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.792bea9b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n\r\n    const handleInputChange = ( e ) => {\r\n\r\n        setInputValue( e.target.value );\r\n\r\n    }\r\n    const handleReset = ( e ) => {\r\n\r\n        setInputValue( '' );\r\n\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => {\r\n                return [inputValue];\r\n            })\r\n        }\r\n        \r\n    }\r\n    \r\n    return (\r\n\r\n        <form onSubmit= { handleSubmit }>\r\n\r\n        <input \r\n            type=\"text\"\r\n            value= { inputValue }\r\n            onChange={ handleInputChange }\r\n            placeholder=\"Ingresa lo que quieras\"\r\n            />\r\n\r\n        <button\r\n            type=\"reset\"\r\n            className=\"btn-form\"\r\n            onClick= { handleReset }\r\n        >Clear</button>\r\n\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}\r\n","export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=pTtXuPCA4UDZ0lxpx5N85y4QGwxPBiHk`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react';\r\n\r\n\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n    \r\n    return (\r\n\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n\r\n            <img src={ url } alt={ title }></img>\r\n            <p> { title } </p>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n \r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n            { loading && <p>Loading</p> }\r\n            \r\n            { images.length === 0 && <p>No hay resultados disponibles</p> }\r\n\r\n            { <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    return state;\r\n    \r\n}","\r\n\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Goku']);\r\n    \r\n    return (\r\n\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory setCategories = { setCategories }/>\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => \r\n                        <GifGrid \r\n                        key = { category }\r\n                        category = { category}\r\n                        />\r\n                        )\r\n                }\r\n            </ol>         \r\n        </>\r\n        \r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}